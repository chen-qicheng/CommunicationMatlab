function BitData = demodqam16opt2(Conste, Normalized)
% 函数描述：对接收到的星座图进行硬判决，采用自己的优化算法（二）
%
% called by：各种需要进行星座解调硬判决的m文件
% 输入参数：
%   Conste：接收到的星座点（已功率归一化）
%   Normalized: 指定功率是否归一化，字符串形式，
%               只能为Normalized或者NonNormalized，否则报错
% 输出参数：
%   BitData：输出的0、1比特信息
%
%               Last Version : 1.0
%               This Version : 2.0
%     This File generated by : 张力
%       This File updated by : 张力
%
% Revision History ：
%     时间            具体工作
%     20120719        v1.0的输入参数只能为标量，该版本可以为向量
%
% Email: larlyii@outlook.com


% 星座映射的规则按照MATLAB默认的Gray映射规则，16个星座点分别如下
% 十进制表示如下
% 0   4   12   8
% 1   5   13   9
% 3   7   15  11
% 2   6   14  10
% 二进制表示如下
% 0000    0100    1100    1000
% 0001    0101    1101    1001
% 0011    0111    1111    1011
% 0010    0110    1110    1010

if strcmp(Normalized, 'Normalized')
    Conste = Conste * sqrt(10); % 去归一化
elseif strcmp(Normalized, 'NonNormalized')
    % do nothing
else
    error('第二个参数必须为Normalized或者NonNormalized');
end

Conste_I = real(Conste);
Conste_Q = imag(Conste);
BitDataMat = zeros(4, length(Conste));
Idx1 = find(Conste_I <  -2);
Idx2 = find(Conste_I >= -2 & Conste_I < 0);
Idx3 = find(Conste_I >=  0 & Conste_I < 2);
Idx4 = find(Conste_I >=  2);

Idx5 = find(Conste_Q <  -2);
Idx6 = find(Conste_Q >= -2 & Conste_Q < 0);
Idx7 = find(Conste_Q >=  0 & Conste_Q < 2);
Idx8 = find(Conste_Q >=  2);

BitDataMat(1:2, Idx1) = repmat([0; 0], 1, length(Idx1));
BitDataMat(1:2, Idx2) = repmat([0; 1], 1, length(Idx2));
BitDataMat(1:2, Idx3) = repmat([1; 1], 1, length(Idx3));
BitDataMat(1:2, Idx4) = repmat([1; 0], 1, length(Idx4));

BitDataMat(3:4, Idx5) = repmat([1; 0], 1, length(Idx5));
BitDataMat(3:4, Idx6) = repmat([1; 1], 1, length(Idx6));
BitDataMat(3:4, Idx7) = repmat([0; 1], 1, length(Idx7));
BitDataMat(3:4, Idx8) = repmat([0; 0], 1, length(Idx8));
BitData = reshape(BitDataMat, [], 1);

